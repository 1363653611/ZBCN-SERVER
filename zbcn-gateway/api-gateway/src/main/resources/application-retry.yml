server:
  port: 9201
service-url:
  user-service: http://localhost:9001
spring:
  cloud:
    gateway:
      routes:
        - id: retry_route # 重试
          uri: http://localhost:9001
          order: 1
          predicates:
            - Method=GET
          filters:
            - name: Retry
              args:
                retries: 1 #需要进行重试的次数
                statuses: BAD_GATEWAY #返回哪个状态码需要进行重试，返回状态码为5XX进行重试
                backoff:
                  firstBackoff: 10ms
                  maxBackoff: 50ms
                  factor: 2
                  basedOnPreviousValue: false

        - id: requestratelimiter_route # 限流
          uri: ${service-url.user-service}
          order: 3
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1 #每秒允许处理的请求数量
                redis-rate-limiter.burstCapacity: 2 #每秒最大处理的请求数量
                key-resolver: "#{@ipKeyResolver}" #限流策略，对应策略的Bean
          predicates:
            - Method=GET

        - id: hystrix_route # 熔断
          uri: ${service-url.user-service}/**
          order: 4
          predicates:
            - Method=GET
          filters:
            - name: Hystrix
              args:
                name: fallbackcmd
                fallbackUri: forward:/fallback

        - id: path_route #路由的ID
          uri: ${service-url.user-service}/user/{id} #匹配后路由地址
          order: 10 # 路由执行顺序（也可理解成过滤器的执行顺序），执行顺序是从小到大执行，较高的值被解释为较低的优先级。
          predicates: # 断言，路径相匹配的进行路由
            - Path=/user/{id}


  profiles:
    active: dev

  redis:
    host: localhost
    port: 6379
    # password: 123456
  logging:
    level:
      org.springframework.cloud.gateway: debug